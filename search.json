[{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement github@stefantaubert.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 birdnetR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started with birdnetR","text":"First, install reticulate package haven’t already: now, install package GitHub. install package directly GitHub, need devtools package installed. don’t devtools installed, can install using: , can install birdnetR GitHub: Next, install birdnet, set Python virtual environment named r-birdnet default. can configure envname parameter. initial setup encounter issues environment. Incompatible Python Version compatible Python version installed, can use reticulate::use_python_version(version = <version>).","code":"install.packages(\"reticulate\") install.packages(\"devtools\") devtools::install_github(\"birdnet-team/birdnetR\") library(birdnetR) install_birdnet()"},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetr.html","id":"identify-species-in-an-audio-file","dir":"Articles","previous_headings":"Usage","what":"Identify species in an audio file","title":"Get started with birdnetR","text":"Using BirdNET, can identify bird species within audio file. function returns predictions every 3-second snippet file exceed specified min_confidence threshold. row resulting data frame represents single prediction specific 3-second interval. multiple predictions confidence threshold within time interval, see multiple rows interval. filter keep probable prediction per interval, can use convenience function provided package.","code":"# Load the package library(birdnetR)  # Initialize the BirdNET model model <- init_model()  # Path to the exemplary audio file (replace with your own file path) audio_path <- system.file(\"extdata\", \"soundscape.wav\", package = \"birdnetR\")  # Predict species within the audio file predict_species(model, audio_path, min_confidence = 0.3, keep_empty = TRUE) get_top_prediction(predictions)"},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetr.html","id":"using-a-custom-species-list","dir":"Articles","previous_headings":"Usage","what":"Using a custom species list","title":"Get started with birdnetR","text":"may always need identify 6,000+ species available model. focus species relevant project, can use custom species list containing necessary class labels. Class labels follow specific format, consisting scientific name common name, separated underscore, like : create custom species list, ensure class label separate line .txt file. can refer example included package check full list species BirdNET trained .","code":"\"Accipiter cooperii_Cooper's Hawk\" \"Agelaius phoeniceus_Red-winged Blackbird\" # Path to the label file including all BirdNET classes # use this file as a template to create your custom species list but don't change it.  get_labels_path(language = \"en_us\")  # Path to the example custom species list with a reduced number of class system.file(\"extdata\", \"species_list.txt\", package = \"birdnetR\") # read in your custom species list species_list_file <- system.file(\"extdata\", \"species_list.txt\", package = \"birdnetR\") custom_species_list <- get_species_from_file(species_list_file)  # Predict using the provided class labels only predict_species(model, audio_path, filter_species = custom_species_list, min_confidence = 0.3, keep_empty = FALSE)  # It is the same to supply a vector of class labels predict_species(model, audio_path, filter_species = c(\"Cyanocitta cristata_Blue Jay\", \"Junco hyemalis_Dark-eyed Junco\"), min_confidence = 0.3, keep_empty = FALSE)"},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetr.html","id":"predict-species-occurence-with-the-meta-model","dir":"Articles","previous_headings":"Usage","what":"Predict species occurence with the meta model","title":"Get started with birdnetR","text":"BirdNET includes Meta Model can predict occurrence bird species specific location time year. function returns data frame containing class labels corresponding confidence values, indicate likelihood species presence. labels can used create custom species list analysis. detailed information, refer help file: ?predict_species_at_location_and_time.","code":"# predict species occurrence in Ithaca, NY predicted_species <- predict_species_at_location_and_time(model, latitude = 42.5, longitude = -76.45, week = 4)  # Predict using the predicted class labels only predict_species(model, audio_path, filter_species = predicted_species$label, min_confidence = 0.3, keep_empty = FALSE)"},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetr.html","id":"translating-common-species-names","dir":"Articles","previous_headings":"Usage","what":"Translating common species names","title":"Get started with birdnetR","text":"birdnetR package allows translate common bird species names several different languages. check languages supported, can use following command: output common names preferred language, initialize model language parameter set desired language code: want view class labels specific language, can retrieve inspect using commands:","code":"available_languages() init_model(language = \"fr\") labels_path_lang <- get_labels_path(language = \"fr\") get_species_from_file(labels_path_lang)"},{"path":"https://birdnet-team.github.io/birdnetR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Kahl. Author, maintainer. BirdNET Team. Author.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kahl S, Team B (2024). birdnetR: Identifying bird species sounds. R package version 0.1.0, https://birdnet-team.github.io/birdnetR/.","code":"@Manual{,   title = {birdnetR: Identifying bird species by their sounds},   author = {Stefan Kahl and BirdNET Team},   year = {2024},   note = {R package version 0.1.0},   url = {https://birdnet-team.github.io/birdnetR/}, }"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"birdnetr-","dir":"","previous_headings":"","what":"Identifying bird species by their sounds","title":"Identifying bird species by their sounds","text":"wrapper birdnet Python package automated bird sound ID available . birdnetR geared towards providing robust workflow ecological data analysis bioacoustic projects. covers essential functionalities, doesn’t include features found BirdNET-Analyzer, available . features might available BirdNET Analyzer package. Please note birdnetR active development, might encounter changes affect current workflow. recommend checking updates regularly.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Identifying bird species by their sounds","text":"Feel free use birdnetR acoustic analyses research. , please cite :","code":"@article{kahl2021birdnet,   title={BirdNET: A deep learning solution for avian diversity monitoring},   author={Kahl, Stefan and Wood, Connor M and Eibl, Maximilian and Klinck, Holger},   journal={Ecological Informatics},   volume={61},   pages={101236},   year={2021},   publisher={Elsevier} }"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Identifying bird species by their sounds","text":"Source Code: source code project licensed MIT License. Models: models used project licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC -NC-SA 4.0). Please ensure review adhere specific license terms provided model. Note educational research purposes considered non-commercial use cases.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Identifying bird species by their sounds","text":"First, install reticulate package haven’t already: now, install package GitHub. install package directly GitHub, need devtools package installed. don’t devtools installed, can install using: , can install birdnetR GitHub: Next, install birdnet, set Python virtual environment named r-birdnet default. can configure envname parameter. initial setup encounter issues environment.","code":"install.packages(\"reticulate\") install.packages(\"devtools\") devtools::install_github(\"birdnet-team/birdnetR\") library(birdnetR) install_birdnet()"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"example-use","dir":"","previous_headings":"","what":"Example use","title":"Identifying bird species by their sounds","text":"’s simple example use package predict bird species audio file:","code":"# Load the package library(birdnetR)  # Initialize the BirdNET model model <- init_model()  # Path to the audio file (replace with your own file path) audio_path <- \"path/to/your/soundscape.wav\"  # Predict species within the audio file predictions <- predict_species(model, audio_path)  # Get most probable prediction within each time interval get_top_prediction(predictions)"},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"cloning-the-repository","dir":"","previous_headings":"Developer Guide","what":"Cloning the Repository","title":"Identifying bird species by their sounds","text":"contribute development birdnetR, can clone repository GitHub:","code":"git clone https://github.com/birdnet-team/birdnetR.git cd birdnetR"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"setting-up-the-development-environment","dir":"","previous_headings":"Developer Guide","what":"Setting Up the Development Environment","title":"Identifying bird species by their sounds","text":"Install R Package Dependencies Ensure necessary R package dependencies: Setting Python Environment Set Python virtual environment install birdnet Python package described . Generating Documentation generate documentation, use roxygen2 package: Running Tests run tests, use testthat package: Building checking Package build check package, use devtools package:","code":"install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"reticulate\")) devtools::document() devtools::test() devtools::build() devtools::check()"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Identifying bird species by their sounds","text":"project supported Jake Holshuh (Cornell class ’69) Arthur Vining Davis Foundations. work K. Lisa Yang Center Conservation Bioacoustics made possible generosity K. Lisa Yang advance innovative conservation technologies inspire inform conservation wildlife habitats. German Federal Ministry Education Research funding development BirdNET project “BirdNET+” (FKZ 01|S22072). Additionally, German Federal Ministry Environment, Nature Conservation Nuclear Safety funding development BirdNET project “DeepBirdDetect” (FKZ 67KI31040E).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"partners","dir":"","previous_headings":"","what":"Partners","title":"Identifying bird species by their sounds","text":"BirdNET joint effort partners academia industry. Without partnerships, project possible. Thank !","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Languages for BirdNET Model — available_languages","title":"Get Available Languages for BirdNET Model — available_languages","text":"Retrieve available languages supported BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Languages for BirdNET Model — available_languages","text":"","code":"available_languages()"},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Languages for BirdNET Model — available_languages","text":"sorted character vector containing available language codes.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Languages for BirdNET Model — available_languages","text":"","code":"available_languages() #> List of 22 #>  $ python              : chr \"/usr/bin/python3\" #>  $ libpython           : chr \"/usr/lib/python3.10/config-3.10-x86_64-linux-gnu/libpython3.10.so\" #>  $ pythonhome          : chr \"//usr://usr\" #>  $ pythonpath          : chr \"/home/runner/work/_temp/Library/reticulate/config:/usr/lib/python310.zip:/usr/lib/python3.10:/usr/lib/python3.1\"| __truncated__ #>  $ prefix              : chr \"/usr\" #>  $ exec_prefix         : chr \"/usr\" #>  $ base_exec_prefix    : chr \"/usr\" #>  $ virtualenv          : chr \"\" #>  $ virtualenv_activate : chr \"\" #>  $ executable          : chr \"/usr/bin/python3\" #>  $ base_executable     : chr \"/usr/bin/python3\" #>  $ version_string      : chr \"3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\" #>  $ version             : chr \"3.10\" #>  $ architecture        : chr \"64bit\" #>  $ anaconda            : logi FALSE #>  $ conda               : chr \"False\" #>  $ numpy               : NULL #>  $ required_module     : chr \"birdnet\" #>  $ required_module_path: NULL #>  $ available           : logi TRUE #>  $ python_versions     : chr [1:2] \"/usr/bin/python3\" \"/usr/bin/python\" #>  $ forced              : NULL #>  - attr(*, \"class\")= chr \"py_config\" #> Error: Python module birdnet.models was not found. #>  #> Detected Python configuration: #>  #>"},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnetR.html","id":null,"dir":"Reference","previous_headings":"","what":"BirdNET for R — birdnetR","title":"BirdNET for R — birdnetR","text":"birdnetR wrapper around python package birdnet.","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnetR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BirdNET for R — birdnetR","text":"Maintainer: Stefan Kahl stefan.kahl@cornell.edu Authors: BirdNET Team","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_labels_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Path to BirdNET Labels File for a Specified Language — get_labels_path","title":"Get Path to BirdNET Labels File for a Specified Language — get_labels_path","text":"function retrieves file path BirdNET labels file system corresponding specified language. file contains class labels supported BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_labels_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Path to BirdNET Labels File for a Specified Language — get_labels_path","text":"","code":"get_labels_path(language)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_labels_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Path to BirdNET Labels File for a Specified Language — get_labels_path","text":"language character string specifying language code labels path requested. language must one available languages supported BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_labels_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Path to BirdNET Labels File for a Specified Language — get_labels_path","text":"character string representing file path labels file specified language.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_labels_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Path to BirdNET Labels File for a Specified Language — get_labels_path","text":"language parameter must one available languages returned available_languages().","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_labels_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Path to BirdNET Labels File for a Specified Language — get_labels_path","text":"","code":"get_labels_path(\"en_us\") #> List of 22 #>  $ python              : chr \"/usr/bin/python3\" #>  $ libpython           : chr \"/usr/lib/python3.10/config-3.10-x86_64-linux-gnu/libpython3.10.so\" #>  $ pythonhome          : chr \"//usr://usr\" #>  $ pythonpath          : chr \"/home/runner/work/_temp/Library/reticulate/config:/usr/lib/python310.zip:/usr/lib/python3.10:/usr/lib/python3.1\"| __truncated__ #>  $ prefix              : chr \"/usr\" #>  $ exec_prefix         : chr \"/usr\" #>  $ base_exec_prefix    : chr \"/usr\" #>  $ virtualenv          : chr \"\" #>  $ virtualenv_activate : chr \"\" #>  $ executable          : chr \"/usr/bin/python3\" #>  $ base_executable     : chr \"/usr/bin/python3\" #>  $ version_string      : chr \"3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\" #>  $ version             : chr \"3.10\" #>  $ architecture        : chr \"64bit\" #>  $ anaconda            : logi FALSE #>  $ conda               : chr \"False\" #>  $ numpy               : NULL #>  $ required_module     : chr \"birdnet\" #>  $ required_module_path: NULL #>  $ available           : logi TRUE #>  $ python_versions     : chr [1:2] \"/usr/bin/python3\" \"/usr/bin/python\" #>  $ forced              : NULL #>  - attr(*, \"class\")= chr \"py_config\" #> Error: Python module birdnet.models was not found. #>  #> Detected Python configuration: #>  #>"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_species_from_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read species labels from a file — get_species_from_file","title":"Read species labels from a file — get_species_from_file","text":"convenience function read species labels file.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_species_from_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read species labels from a file — get_species_from_file","text":"","code":"get_species_from_file(species_file)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_species_from_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read species labels from a file — get_species_from_file","text":"species_file Path species file.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_species_from_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read species labels from a file — get_species_from_file","text":"vector class labels e.g. c(\"Cyanocitta cristata_Blue Jay\", \"Zenaida macroura_Mourning Dove\")","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_species_from_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read species labels from a file — get_species_from_file","text":"","code":"# Read a custom species file get_species_from_file(system.file(\"extdata\", \"species_list.txt\", package = \"birdnetR\")) #> List of 22 #>  $ python              : chr \"/usr/bin/python3\" #>  $ libpython           : chr \"/usr/lib/python3.10/config-3.10-x86_64-linux-gnu/libpython3.10.so\" #>  $ pythonhome          : chr \"//usr://usr\" #>  $ pythonpath          : chr \"/home/runner/work/_temp/Library/reticulate/config:/usr/lib/python310.zip:/usr/lib/python3.10:/usr/lib/python3.1\"| __truncated__ #>  $ prefix              : chr \"/usr\" #>  $ exec_prefix         : chr \"/usr\" #>  $ base_exec_prefix    : chr \"/usr\" #>  $ virtualenv          : chr \"\" #>  $ virtualenv_activate : chr \"\" #>  $ executable          : chr \"/usr/bin/python3\" #>  $ base_executable     : chr \"/usr/bin/python3\" #>  $ version_string      : chr \"3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\" #>  $ version             : chr \"3.10\" #>  $ architecture        : chr \"64bit\" #>  $ anaconda            : logi FALSE #>  $ conda               : chr \"False\" #>  $ numpy               : NULL #>  $ required_module     : chr \"birdnet\" #>  $ required_module_path: NULL #>  $ available           : logi TRUE #>  $ python_versions     : chr [1:2] \"/usr/bin/python3\" \"/usr/bin/python\" #>  $ forced              : NULL #>  - attr(*, \"class\")= chr \"py_config\" #> Error: Python module birdnet.utils was not found. #>  #> Detected Python configuration: #>  #>   # To access all class labels that are supported in your language, # you can read in the respective label file labels_path <- get_labels_path(\"fr\") #> List of 22 #>  $ python              : chr \"/usr/bin/python3\" #>  $ libpython           : chr \"/usr/lib/python3.10/config-3.10-x86_64-linux-gnu/libpython3.10.so\" #>  $ pythonhome          : chr \"//usr://usr\" #>  $ pythonpath          : chr \"/home/runner/work/_temp/Library/reticulate/config:/usr/lib/python310.zip:/usr/lib/python3.10:/usr/lib/python3.1\"| __truncated__ #>  $ prefix              : chr \"/usr\" #>  $ exec_prefix         : chr \"/usr\" #>  $ base_exec_prefix    : chr \"/usr\" #>  $ virtualenv          : chr \"\" #>  $ virtualenv_activate : chr \"\" #>  $ executable          : chr \"/usr/bin/python3\" #>  $ base_executable     : chr \"/usr/bin/python3\" #>  $ version_string      : chr \"3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\" #>  $ version             : chr \"3.10\" #>  $ architecture        : chr \"64bit\" #>  $ anaconda            : logi FALSE #>  $ conda               : chr \"False\" #>  $ numpy               : NULL #>  $ required_module     : chr \"birdnet\" #>  $ required_module_path: NULL #>  $ available           : logi TRUE #>  $ python_versions     : chr [1:2] \"/usr/bin/python3\" \"/usr/bin/python\" #>  $ forced              : NULL #>  - attr(*, \"class\")= chr \"py_config\" #> Error: Python module birdnet.models was not found. #>  #> Detected Python configuration: #>  #>  species_list <- get_species_from_file(labels_path) #> Error in eval(expr, envir, enclos): object 'labels_path' not found head(species_list) #> Error in eval(expr, envir, enclos): object 'species_list' not found"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the top prediction by confidence within time intervals — get_top_prediction","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"convenience function retrieves row(s) highest confidence value within time interval. can also limit results specific time interval specified.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"","code":"get_top_prediction(data, filter = NULL)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"data data frame columns 'start', 'end', 'scientific_name', 'common_name', 'confidence'. data frame typically output predictions_to_df. filter list containing 'start' 'end' values filter data calculation. NULL, function processes time intervals.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"data frame containing rows highest confidence per group specified interval.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"","code":"if (FALSE) { # interactive() # Example data data <- data.frame(   start = c(0, 0, 1, 1, 2, 2),   end = c(1, 1, 2, 2, 3, 3),   scientific_name = c(     \"Species A\",     \"Species B\",     \"Species A\",     \"Species B\",     \"Species A\",     \"Species B\"   ),   common_name = c(     \"Common A\",     \"Common B\",     \"Common A\",     \"Common B\",     \"Common A\",     \"Common B\"   ),   confidence = c(0.1, 0.2, 0.5, 0.3, 0.7, 0.8) ) data  # Get top prediction for each time interval get_top_prediction(data)  # Get top prediction for a specific time interval get_top_prediction(data, filter = list(start = 1, end = 2))  # The same thing can be done using dplyr # data |> #    dplyr::group_by(start, end) |> #    dplyr::slice_max(order_by = confidence) }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the BirdNET Model — init_model","title":"Initialize the BirdNET Model — init_model","text":"function initializes BirdNET model (v2.4).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the BirdNET Model — init_model","text":"","code":"init_model(tflite_num_threads = NULL, language = \"en_us\")"},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the BirdNET Model — init_model","text":"tflite_num_threads integer. number threads use TensorFlow Lite operations. NULL (default), default threading behavior used. coerced integer possible. language character string specifying language code use model's text processing. language must one available languages supported BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the BirdNET Model — init_model","text":"instance BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize the BirdNET Model — init_model","text":"language parameter must one available languages returned available_languages().","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/install_birdnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Install BirdNET and its dependencies — install_birdnet","title":"Install BirdNET and its dependencies — install_birdnet","text":"install_birdnet() installs python package birdnet PyPi virtual environment.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/install_birdnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install BirdNET and its dependencies — install_birdnet","text":"","code":"install_birdnet(   ...,   envname = \"r-birdnet\",   new_env = identical(envname, \"r-birdnet\") )"},{"path":"https://birdnet-team.github.io/birdnetR/reference/install_birdnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install BirdNET and its dependencies — install_birdnet","text":"... arguments passed reticulate::py_install() envname Name virtual environment. Defaults 'r-birdnet'. new_env TRUE, existing Python virtual environment specified envname deleted first.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an Object is a Valid Species List — is_valid_species_list","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"internal function checks object either character vector length greater 0 list element single non-empty character string.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"","code":"is_valid_species_list(obj)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"obj object check. can either character vector list.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"logical value indicating whether object valid species list: TRUE object character vector length > 0 list element single character string. FALSE otherwise.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"function intended internal use may exported accessible external users.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"","code":"if (FALSE) { # \\dontrun{ is_valid_species_list(c(\"species1\", \"species2\")) # TRUE is_valid_species_list(list(\"species1\", \"species2\")) # TRUE is_valid_species_list(c(1, 2, 3)) # FALSE is_valid_species_list(list(a = 1, b = 2)) # FALSE } # }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Species Within an Audio File — predict_species","title":"Predict Species Within an Audio File — predict_species","text":"function predicts species within audio file using BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Species Within an Audio File — predict_species","text":"","code":"predict_species(   model,   audio_file = system.file(\"extdata\", \"soundscape.wav\", package = \"birdnetR\"),   min_confidence = 0.1,   batch_size = 1L,   use_bandpass = TRUE,   bandpass_fmin = 0L,   bandpass_fmax = 15000L,   apply_sigmoid = TRUE,   sigmoid_sensitivity = 1,   filter_species = NULL,   file_splitting_duration_s = 600,   keep_empty = TRUE )"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Species Within an Audio File — predict_species","text":"model BirdNETModel. instance BirdNET model returned init_model(). audio_file character. path audio file. min_confidence numeric. Minimum confidence threshold predictions. batch_size integer. Number audio samples process batch. use_bandpass logical. Whether apply bandpass filter. bandpass_fmin, bandpass_fmax numeric. Minimum/Maximum frequency bandpass filter (Hz). Ignored use_bandpass False. apply_sigmoid logical. Whether apply sigmoid function model output. sigmoid_sensitivity numeric. Sensitivity parameter sigmoid function. Must interval 0.5 - 1.5. Ignored apply_sigmoid False. filter_species NULL, character vector length greater 0 list element single non-empty character string. Used filter predictions. NULL, filtering applied. See get_species_from_file() details. file_splitting_duration_s numeric. Duration seconds splitting audio file smaller segments processing. keep_empty logical. Whether include empty intervals output.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Species Within an Audio File — predict_species","text":"data frame columns: start, end, scientific_name, common_name, confidence. row represents single prediction.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Species Within an Audio File — predict_species","text":"Applying sigmoid activation function, (apply_sigmoid=True) scales unbound class output linear classifier (\"logit score\") range 0-1. confidence score unitless, numeric expression BirdNET’s “confidence” prediction (probability species presence). Sigmoid sensitivity < 1 leads higher lower scoring predictions value > 1 leads intermediate-scoring predictions. information BirdNET confidence scores, sigmoid activation function suggested workflow convert confidence scores probabilities, see Wood & Kahl, 2024","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict Species Within an Audio File — predict_species","text":"Wood, C. M., & Kahl, S. (2024). Guidelines appropriate use BirdNET scores detector outputs. Journal Ornithology. https://doi.org/10.1007/s10336-024-02144-5","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict species for a given location and time — predict_species_at_location_and_time","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"Uses BirdNET Species Range Model estimate presence bird species specified location time year.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"","code":"predict_species_at_location_and_time(   model,   latitude,   longitude,   week = NULL,   min_confidence = 0.03 )"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"model BirdNETModel. instance BirdNET model returned init_model(). latitude numeric. latitude location species prediction. Must interval [-90.0, 90.0]. longitude numeric. longitude location species prediction. Must interval [-180.0, 180.0]. week integer. week year predict species. Must interval [1, 48] specified. NULL, predictions limited specific week. min_confidence numeric. Minimum confidence threshold predictions considered valid. Must interval [0, 1.0).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"data frame columns: label, confidence. row represents predicted species, confidence indicating likelihood species present specified location time.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"BirdNET Species Range Model leverages eBird checklist frequency data estimate probability bird species occurrences based latitude, longitude, time year. integrates actual observations expert-curated data, making adaptable regions varying levels data availability. model employs circular embeddings classifier predict species presence migration patterns, achieving higher accuracy data-rich regions lower accuracy underrepresented areas like parts Africa Asia. details, can view full discussion : https://github.com/kahst/BirdNET-Analyzer/discussions/234","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"","code":"# Predict species in Chemnitz, Germany, that are present all year round model <- init_model(language = \"de\") #> List of 22 #>  $ python              : chr \"/usr/bin/python3\" #>  $ libpython           : chr \"/usr/lib/python3.10/config-3.10-x86_64-linux-gnu/libpython3.10.so\" #>  $ pythonhome          : chr \"//usr://usr\" #>  $ pythonpath          : chr \"/home/runner/work/_temp/Library/reticulate/config:/usr/lib/python310.zip:/usr/lib/python3.10:/usr/lib/python3.1\"| __truncated__ #>  $ prefix              : chr \"/usr\" #>  $ exec_prefix         : chr \"/usr\" #>  $ base_exec_prefix    : chr \"/usr\" #>  $ virtualenv          : chr \"\" #>  $ virtualenv_activate : chr \"\" #>  $ executable          : chr \"/usr/bin/python3\" #>  $ base_executable     : chr \"/usr/bin/python3\" #>  $ version_string      : chr \"3.10.12 (main, Mar 22 2024, 16:50:05) [GCC 11.4.0]\" #>  $ version             : chr \"3.10\" #>  $ architecture        : chr \"64bit\" #>  $ anaconda            : logi FALSE #>  $ conda               : chr \"False\" #>  $ numpy               : NULL #>  $ required_module     : chr \"birdnet\" #>  $ required_module_path: NULL #>  $ available           : logi TRUE #>  $ python_versions     : chr [1:2] \"/usr/bin/python3\" \"/usr/bin/python\" #>  $ forced              : NULL #>  - attr(*, \"class\")= chr \"py_config\" #> Error: Python module birdnet.models was not found. #>  #> Detected Python configuration: #>  #>  predict_species_at_location_and_time(model, latitude = 50.8334, longitude = 12.9231) #> Error in eval(expr, envir, enclos): object 'model' not found"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a single prediction element to a data frame — predictions_list_element_to_df","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"helper function takes single list element predictions list parses data frame format, extracting time interval, scientific name, common name, confidence level.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"","code":"predictions_list_element_to_df(x)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"x single list element predictions list. expected named list one elements names represent labels \"scientificName_commonName\" values confidence scores.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"data frame columns: start, end, scientific_name, common_name, confidence.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list of predictions from python to a data frame — predictions_to_df","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"function processes list predictions python birdnet package, containing time intervals, scientific names, common names, confidence levels, converts structured data frame. handles cases elements list might empty.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"","code":"predictions_to_df(predictions, keep_empty = FALSE)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"predictions list element expected named list. names elements represent time intervals format \"(start,end)\", element contains another list names form \"scientificName_commonName\" values confidence scores. keep_empty logical flag indicating whether include empty elements rows output data frame. TRUE, empty elements filled NA. FALSE, empty elements excluded.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"data frame columns: start, end, scientific_name, common_name, confidence. row represents single prediction.","code":""}]
