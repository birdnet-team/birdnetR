[{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official email address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement ccb-birdnet@cornell.edu. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 birdnetR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started with birdnetR","text":"First, install reticulate package haven’t already: now, install package GitHub. install package directly GitHub, need devtools package installed. don’t devtools installed, can install using: , can install birdnetR GitHub: Next, install birdnet, set Python virtual environment named r-birdnet default. can configure envname parameter. initial setup encounter issues environment. Incompatible Python Version compatible Python version installed, can use reticulate::use_python_version(version = <version>).","code":"install.packages(\"reticulate\") install.packages(\"devtools\") devtools::install_github(\"birdnet-team/birdnetR\") library(birdnetR) install_birdnet()"},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetR.html","id":"custom-virtual-environment","dir":"Articles","previous_headings":"Installation","what":"Custom virtual environment","title":"Get started with birdnetR","text":"default, virtual environment named r-birdnet used. don’t need customization, can ignore section, everything work ---box. need use custom name virtual environment, can specify using envname argument: next time start new R session, tell reticulate use environment loading libraries: default, reticulate install use folder .virtualenvs home directory. can also specify paths virtual environments, useful want install birdnetR existing virtual environment: prefer store virtual environment project folder, reticulate automatically discover , need call use_virtualenv().","code":"library(birdnetR) install_birdnet(envname = \"custom\") library(birdnetR) reticulate::use_virtualenv(\"custom\") library(birdnetR) path_venv <- \"/path/to/existing/venv\" install_birdnet(envname = path_venv) reticulate::use_virtualenv(path_venv)"},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetR.html","id":"initialize-a-birdnet-model","dir":"Articles","previous_headings":"Usage","what":"Initialize a BirdNET model","title":"Get started with birdnetR","text":"begin using BirdNET model, must first initialized. step, required model downloaded necessary, loaded memory, prepared making predictions. Several model variations available, including TensorFlow Lite model, smaller lightweight, Protobuf model, larger capable running GPU hardware faster performance. can also load custom model one available. information training custom models, please refer BirdNET-Analyzer repository. load custom model, provide path folder containing model files classifier name. Custom classifiers still based specific version BirdNET model, need specify version well.","code":"# The models are defined using the birdnet_model_* family of functions. # See ?birdnet_model_load for more details.  # Initialize the TensorFlow Lite model birdnet_model_tflite(\"v2.4\")  # Initialize the Protobuf model birdnet_model_protobuf(\"v2.4\") classifier_folder <- \"/path/to/custom/model\" classifier_name <- \"Custom_Classifier\"  birdnet_model_custom(\"v2.4\", classifier_folder = classifier_folder, classifier_name = classifier_name)"},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetR.html","id":"identify-species-in-an-audio-file","dir":"Articles","previous_headings":"Usage","what":"Identify species in an audio file","title":"Get started with birdnetR","text":"BirdNET, can identify bird species present audio file. function returns predictions 3-second snippet audio exceeds specified min_confidence threshold. row resulting data frame represents single prediction specific 3-second interval. multiple predictions confidence threshold time interval, see multiple rows interval. keep probable prediction per interval, can use package’s convenience function.","code":"library(birdnetR)  # Initialize the TFLite BirdNET Model model <- birdnet_model_tflite(\"v2.4\")  # Path to an example audio file (replace with your own file path) audio_path <- system.file(\"extdata\", \"soundscape.wav\", package = \"birdnetR\")  # Predict species in the audio file predictions <- predict_species_from_audio_file(model, audio_path, min_confidence = 0.3, keep_empty = FALSE)  # Example output: #   start end      scientific_name            common_name confidence #       0   3 Poecile atricapillus Black-capped Chickadee  0.8140557 #       3   6 Poecile atricapillus Black-capped Chickadee  0.3082857 #       9  12 Haemorhous mexicanus            House Finch  0.6393781 #      18  21  Cyanocitta cristata               Blue Jay  0.4352708 #      18  21  Clamator coromandus Chestnut-winged Cuckoo  0.3225890 #      21  24  Cyanocitta cristata               Blue Jay  0.3290859 # ... # Get the top prediction for each interval get_top_prediction(predictions)  # Example output: #   start end      scientific_name            common_name confidence #       0   3 Poecile atricapillus Black-capped Chickadee  0.8140557 #       3   6 Poecile atricapillus Black-capped Chickadee  0.3082857 #       9  12 Haemorhous mexicanus            House Finch  0.6393781 #      18  21  Cyanocitta cristata               Blue Jay  0.4352708 #      21  24  Cyanocitta cristata               Blue Jay  0.3290859  # Note: Fewer rows appear for the interval 18-21 as only the top prediction is retained."},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetR.html","id":"using-a-custom-species-list","dir":"Articles","previous_headings":"Usage","what":"Using a custom species list","title":"Get started with birdnetR","text":"many cases, may need identify 6,000+ species available model. focus species relevant project, can use custom species list containing necessary class labels. Providing custom species list limit output set species. Class labels follow specific format, consisting scientific name common name, separated underscore, like : create custom species list, ensure class label placed separate line .txt file. can refer example included package consult full list species BirdNET trained . exact labels model-specific can retrieved using labels_path function. read_labels function can conveniently load labels file. use custom species list, pass argument predict_species_from_audio_file function. Since just character vector, can also pass vector directly function.","code":"\"Accipiter cooperii_Cooper's Hawk\" \"Agelaius phoeniceus_Red-winged Blackbird\" # Retrieve the path to the full list of BirdNET classes. # Use this as a template for creating your custom species list, but don't modify this file directly. labels_path(model, language = \"en_us\") # /.../birdnet/models/v2.4/TFLite/labels/en_us.txt\"  # Path to the example custom species list with a reduced number of species custom_species_list <- system.file(\"extdata\", \"species_list.txt\", package = \"birdnetR\") read_labels(custom_species_list)  # [1] \"Accipiter cooperii_Cooper's Hawk\"              \"Agelaius phoeniceus_Red-winged Blackbird\" # [3] \"Anas platyrhynchos_Mallard\"                    \"Anas rubripes_American Black Duck\" # [5] \"Ardea herodias_Great Blue Heron\"               \"Baeolophus bicolor_Tufted Titmouse\" # [7] \"Branta canadensis_Canada Goose\"                \"Bucephala albeola_Bufflehead\" # [9] \"Bucephala clangula_Common Goldeneye\"           \"Buteo jamaicensis_Red-tailed Hawk\" # ... predict_species_from_audio_file(model, audio_path, filter_species = c(\"Cyanocitta cristata_Blue Jay\", \"Junco hyemalis_Dark-eyed Junco\"), min_confidence = 0.3, keep_empty = FALSE)  # Example output: #   start end     scientific_name     common_name confidence #      18  21 Cyanocitta cristata        Blue Jay  0.4352708 #      21  24 Cyanocitta cristata        Blue Jay  0.3290859 #      33  36      Junco hyemalis Dark-eyed Junco  0.4590625 #      36  39      Junco hyemalis Dark-eyed Junco  0.3536855 #      42  45      Junco hyemalis Dark-eyed Junco  0.7375432"},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetR.html","id":"predict-species-occurence-with-the-meta-model","dir":"Articles","previous_headings":"Usage","what":"Predict species occurence with the meta model","title":"Get started with birdnetR","text":"BirdNET includes Meta Model predicts likelihood bird species occurrence specific location time year. function returns data frame containing class labels corresponding confidence values, indicate probability species presence. labels can also used create custom species list analysis. detailed information Meta Model works, refer help file: ?predict_species_at_location_and_time.","code":"# load the meta model meta_model <- birdnet_model_meta(\"v2.4\")  # predict species occurrence in Ithaca, NY in week 4 of the year predict_species_at_location_and_time(meta_model, latitude = 42.5, longitude = -76.45, week = 4)  # Example output: #   label                                       confidence #   Cyanocitta cristata_Blue Jay                0.92886776 #   Poecile atricapillus_Black-capped Chickadee 0.90332001 #   Sitta carolinensis_White-breasted Nuthatch  0.83232993 #   Cardinalis cardinalis_Northern Cardinal     0.82705086 #   Junco hyemalis_Dark-eyed Junco              0.82440305 #   Zenaida macroura_Mourning Dove              0.80619872 #   Corvus brachyrhynchos_American Crow         0.80580002 #   Dryobates pubescens_Downy Woodpecker        0.79495054 #   Spinus tristis_American Goldfinch           0.72782934 #   Baeolophus bicolor_Tufted Titmouse          0.63683629"},{"path":"https://birdnet-team.github.io/birdnetR/articles/birdnetR.html","id":"translating-common-species-names","dir":"Articles","previous_headings":"Usage","what":"Translating common species names","title":"Get started with birdnetR","text":"birdnetR package allows translate common bird species names several different languages. check languages supported, can use following command: output common names preferred language, initialize model language parameter set desired language code: want view class labels specific language, can retrieve inspect using commands:","code":"# supply the version of the BirdNET model you are using available_languages(\"v2.4\") birdnet_model_tflite(\"v2.4\", language = \"fr\") labels_path_lang <- labels_path(model, language = \"fr\") read_labels(labels_path_lang)  # Example output: # [1] \"Abroscopus albogularis_Bouscarle à moustaches\"            \"Abroscopus schisticeps_Bouscarle à face noire\"            \"Abroscopus superciliaris_Bouscarle à sourcils blancs\"     # [4] \"Aburria aburri_Pénélope aburri\"                           \"Acanthagenys rufogularis_Méliphage à bavette\"             \"Acanthidops bairdi_Bec-en-cheville gris\"                  # [7] \"Acanthis cabaret_Sizerin cabaret\"                         \"Acanthis flammea_Sizerin flammé\"                          \"Acanthis hornemanni_Sizerin blanchâtre\"                   # [10] \"Acanthisitta chloris_Xénique grimpeur\"                    \"Acanthiza apicalis_Acanthize troglodyte\"                  \"Acanthiza chrysorrhoa_Acanthize à croupion jaune\"         # [13] \"Acanthiza ewingii_Acanthize de Tasmanie\"                  \"Acanthiza inornata_Acanthize sobre\"                       \"Acanthiza lineata_Acanthize ridé\""},{"path":"https://birdnet-team.github.io/birdnetR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felix Günther. Maintainer. Stefan Kahl. Author. BirdNET Team. Author.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kahl S, Team B (2024). birdnetR: Identifying bird species sounds. R package version 0.1.2, https://birdnet-team.github.io/birdnetR/.","code":"@Manual{,   title = {birdnetR: Identifying bird species by their sounds},   author = {Stefan Kahl and BirdNET Team},   year = {2024},   note = {R package version 0.1.2},   url = {https://birdnet-team.github.io/birdnetR/}, }"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"birdnetr-","dir":"","previous_headings":"","what":"Identifying bird species by their sounds","title":"Identifying bird species by their sounds","text":"wrapper birdnet Python package automated bird sound ID available . birdnetR geared towards providing robust workflow ecological data analysis bioacoustic projects. covers essential functionalities, doesn’t include features found BirdNET-Analyzer, available . features might available BirdNET Analyzer package. Please note birdnetR active development, might encounter changes affect current workflow. recommend checking updates regularly. information, please visit birdnetR website.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Identifying bird species by their sounds","text":"Feel free use birdnetR acoustic analyses research. , please cite :","code":"@article{kahl2021birdnet,   title={BirdNET: A deep learning solution for avian diversity monitoring},   author={Kahl, Stefan and Wood, Connor M and Eibl, Maximilian and Klinck, Holger},   journal={Ecological Informatics},   volume={61},   pages={101236},   year={2021},   publisher={Elsevier} }"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Identifying bird species by their sounds","text":"Source Code: source code project licensed MIT License. Models: models used project licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC -NC-SA 4.0). Please ensure review adhere specific license terms provided model. Note educational research purposes considered non-commercial use cases.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Identifying bird species by their sounds","text":"First, install reticulate package haven’t already: now, install package GitHub. install package directly GitHub, need devtools package installed. don’t devtools installed, can install using: , can install birdnetR GitHub: Next, install birdnet, set Python virtual environment named r-birdnet default. can configure envname parameter. initial setup encounter issues environment.","code":"install.packages(\"reticulate\") install.packages(\"devtools\") devtools::install_github(\"birdnet-team/birdnetR\") library(birdnetR) install_birdnet()"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"example-use","dir":"","previous_headings":"","what":"Example use","title":"Identifying bird species by their sounds","text":"’s simple example use package predict bird species audio file:","code":"# Load the package library(birdnetR)  # Initialize a BirdNET model model <- birdnet_model_tflite()  # Path to the audio file (replace with your own file path) audio_path <- system.file(\"extdata\", \"soundscape.wav\", package = \"birdnetR\")  # Predict species within the audio file predictions <- predict_species_from_audio_file(model, audio_path)  # Get most probable prediction within each time interval get_top_prediction(predictions)"},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"cloning-the-repository","dir":"","previous_headings":"Developer Guide","what":"Cloning the Repository","title":"Identifying bird species by their sounds","text":"contribute development birdnetR, can clone repository GitHub:","code":"git clone https://github.com/birdnet-team/birdnetR.git cd birdnetR"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"setting-up-the-development-environment","dir":"","previous_headings":"Developer Guide","what":"Setting Up the Development Environment","title":"Identifying bird species by their sounds","text":"Install R Package Dependencies Ensure necessary R package dependencies: Setting Python Environment Set Python virtual environment install birdnet Python package described . Generating Documentation generate documentation, use roxygen2 package: Running Tests run tests, use testthat package: Building checking Package build check package, use devtools package:","code":"install.packages(c(\"devtools\", \"roxygen2\", \"testthat\", \"reticulate\")) devtools::document() devtools::test() devtools::build() devtools::check()"},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Identifying bird species by their sounds","text":"project supported Jake Holshuh (Cornell class ’69) Arthur Vining Davis Foundations. work K. Lisa Yang Center Conservation Bioacoustics made possible generosity K. Lisa Yang advance innovative conservation technologies inspire inform conservation wildlife habitats. German Federal Ministry Education Research funding development BirdNET project “BirdNET+” (FKZ 01|S22072). Additionally, German Federal Ministry Environment, Nature Conservation Nuclear Safety funding development BirdNET project “DeepBirdDetect” (FKZ 67KI31040E).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/index.html","id":"partners","dir":"","previous_headings":"","what":"Partners","title":"Identifying bird species by their sounds","text":"BirdNET joint effort partners academia industry. Without partnerships, project possible. Thank !","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Languages for BirdNET Model — available_languages","title":"Get Available Languages for BirdNET Model — available_languages","text":"Retrieve available languages supported specific version BirdNET.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Languages for BirdNET Model — available_languages","text":"","code":"available_languages(version)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Available Languages for BirdNET Model — available_languages","text":"version character. version BirdNET use (default \"v2.4\", versions currently supported).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Languages for BirdNET Model — available_languages","text":"sorted character vector containing available language codes.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/available_languages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Languages for BirdNET Model — available_languages","text":"","code":"if (FALSE) { # interactive() available_languages(\"v2.4\") }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnetR-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated Functions in the birdnetR Package — birdnetR-deprecated","title":"Deprecated Functions in the birdnetR Package — birdnetR-deprecated","text":"functions deprecated removed future versions birdnetR package. Please use alternatives listed .","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnetR-deprecated.html","id":"deprecated-functions","dir":"Reference","previous_headings":"","what":"Deprecated functions","title":"Deprecated Functions in the birdnetR Package — birdnetR-deprecated","text":"init_model function deprecated. Use birdnet_model_tflite instead.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnetR.html","id":null,"dir":"Reference","previous_headings":"","what":"BirdNET for R — birdnetR","title":"BirdNET for R — birdnetR","text":"birdnetR wrapper around python package birdnet.","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnetR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"BirdNET for R — birdnetR","text":"Maintainer: Felix Günther felix.guenther@informatik.tu-chemnitz.de Authors: Stefan Kahl stefan.kahl@cornell.edu BirdNET Team","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnet_model_load.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a BirdNET Model — birdnet_model_load","title":"Initialize a BirdNET Model — birdnet_model_load","text":"various function birdnet_model_* family used create initialize diffent BirdNET models. Models downloaded necessary. birdnet_model_tflite(): creates tflite-model used species prediction audio. birdnet_model_custom(): loads custom model species prediction audio. birdnet_model_protobuf(): creates protobuf model species prediction audio can run GPU (yet implemented). birdnet_model_meta(): creates meta model species prediction location time.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnet_model_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a BirdNET Model — birdnet_model_load","text":"","code":"birdnet_model_tflite(   version = \"v2.4\",   language = \"en_us\",   tflite_num_threads = NULL )  birdnet_model_custom(   version = \"v2.4\",   classifier_folder,   classifier_name,   tflite_num_threads = NULL )  birdnet_model_meta(   version = \"v2.4\",   language = \"en_us\",   tflite_num_threads = NULL )  birdnet_model_protobuf(   version = \"v2.4\",   language = \"en_us\",   custom_device = NULL )"},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnet_model_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a BirdNET Model — birdnet_model_load","text":"version character. version BirdNET use (default \"v2.4\", versions currently supported). language character. Specifies language code use model's text processing. language must one available languages supported BirdNET model. tflite_num_threads integer. number threads use TensorFlow Lite operations. NULL (default), default threading behavior used. coerced integer possible. classifier_folder character. Path folder containing custom classifier. classifier_name character. Name custom classifier. custom_device character. parameter allows specifying custom device computations performed. custom_device specified (.e., default value None), program attempt use GPU (e.g., \"/device:GPU:0\") default. GPU available, fall back using CPU. specifying device string \"/device:GPU:0\" \"/device:CPU:0\", user can explicitly choose device operations executed.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnet_model_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a BirdNET Model — birdnet_model_load","text":"BirdNET model object.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnet_model_load.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a BirdNET Model — birdnet_model_load","text":"Species Prediction audio Models created birdnet_model_tflite(), birdnet_model_custom(), birdnet_model_protobuf() can used predict species within audio file using predict_species_from_audio_file(). Species prediction location time birdnet_model_meta() model can used predict species occurrence specific location time year using predict_species_at_location_and_time().","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnet_model_load.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a BirdNET Model — birdnet_model_load","text":"Currently, models can executed CPU. GPU support yet available.","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/birdnet_model_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a BirdNET Model — birdnet_model_load","text":"","code":"if (FALSE) { # interactive() # Create a TFLite BirdNET model with 2 threads and English (US) language birdnet_model <- birdnet_model_tflite(version = \"v2.4\", language = \"en_us\", tflite_num_threads = 2) }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/create_module_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a module map based on version and base Python module — create_module_map","title":"Create a module map based on version and base Python module — create_module_map","text":"function returns list model constructors miscellaneous paths specific version base Python module.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/create_module_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a module map based on version and base Python module — create_module_map","text":"","code":"create_module_map(version, base_module)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/create_module_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a module map based on version and base Python module — create_module_map","text":"version Character. version module (e.g., \"v2.4\"). base_module Character. base Python module path string (e.g., \"py_birdnet_models\").","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/create_module_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a module map based on version and base Python module — create_module_map","text":"list containing 'models' (list model constructors) 'misc' (list miscellaneous paths), specific version base module.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/create_module_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a module map based on version and base Python module — create_module_map","text":"","code":"if (FALSE) { # interactive() py_birdnet_models <- reticulate::import(\"birdnet.models\") module_map <- create_module_map(\"v2.4\", \"py_birdnet_models\") }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-check_birdnet_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Installed birdnet Version — .check_birdnet_version","title":"Check the Installed birdnet Version — .check_birdnet_version","text":"internal function checks birdnet Python installed version matches requirement. available versions match, issue warning instructions update package.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-check_birdnet_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Installed birdnet Version — .check_birdnet_version","text":"","code":".check_birdnet_version()"},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-check_birdnet_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the Installed birdnet Version — .check_birdnet_version","text":"None. function called side effect stopping execution wrong version installed.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-required_birdnet_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Required BirdNET Version — .required_birdnet_version","title":"Get the Required BirdNET Version — .required_birdnet_version","text":"internal function returns required version BirdNET Python package. Update function new required version package updated.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-required_birdnet_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Required BirdNET Version — .required_birdnet_version","text":"","code":".required_birdnet_version()"},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-required_birdnet_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Required BirdNET Version — .required_birdnet_version","text":"string representing required BirdNET version.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-suggested_python_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Suggested Python Version — .suggested_python_version","title":"Get the Suggested Python Version — .suggested_python_version","text":"internal function returns suggested version Python used BirdNET package. Update function new suggested version necessary.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-suggested_python_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Suggested Python Version — .suggested_python_version","text":"","code":".suggested_python_version()"},{"path":"https://birdnet-team.github.io/birdnetR/reference/dot-suggested_python_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Suggested Python Version — .suggested_python_version","text":"string representing suggested Python version.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/evaluate_python_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate a Python path string and return the corresponding Python object — evaluate_python_path","title":"Evaluate a Python path string and return the corresponding Python object — evaluate_python_path","text":"function takes string representing Python path (e.g., get_model_from_module_map()) evaluates return corresponding Python object.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/evaluate_python_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate a Python path string and return the corresponding Python object — evaluate_python_path","text":"","code":"evaluate_python_path(path_string)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/evaluate_python_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate a Python path string and return the corresponding Python object — evaluate_python_path","text":"path_string Character. string representing Python path (e.g., \"py_birdnet_models$v2m4$AudioModelV2M4TFLite\").","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/evaluate_python_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate a Python path string and return the corresponding Python object — evaluate_python_path","text":"evaluated Python object value.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/evaluate_python_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate a Python path string and return the corresponding Python object — evaluate_python_path","text":"","code":"if (FALSE) { # interactive() py_birdnet_models <- reticulate::import(\"birdnet.models\") module_map <- create_module_map(\"v2.4\", \"py_birdnet_models\") model_string <- get_model_from_module_map(module_map, \"tflite_v2.4\") model_object <- evaluate_python_path(model_string) }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_element_from_module_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an element from a module map regardless of nesting level — get_element_from_module_map","title":"Get an element from a module map regardless of nesting level — get_element_from_module_map","text":"function retrieves element module map traversing nested structure. takes variable number arguments represent keys navigate module map.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_element_from_module_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an element from a module map regardless of nesting level — get_element_from_module_map","text":"","code":"get_element_from_module_map(module_map, ...)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_element_from_module_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an element from a module map regardless of nesting level — get_element_from_module_map","text":"module_map list returned create_module_map(). ... sequence keys represent path desired element module map.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_element_from_module_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an element from a module map regardless of nesting level — get_element_from_module_map","text":"element located specified path within module map.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_element_from_module_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an element from a module map regardless of nesting level — get_element_from_module_map","text":"","code":"if (FALSE) { # interactive() module_map <- create_module_map(\"v2.4\", \"py_birdnet_models\") available_languages_path <- get_element_from_module_map(module_map, \"misc\", \"available_languages\") }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_language_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to retrieve the language path for a BirdNET model — get_language_path","title":"Helper function to retrieve the language path for a BirdNET model — get_language_path","text":"function handles common logic retrieving language path BirdNET model. validates language, creates necessary paths module map, uses appropriate downloader retrieve path language file.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_language_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to retrieve the language path for a BirdNET model — get_language_path","text":"","code":"get_language_path(model, language, downloader_key, subfolder)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_language_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to retrieve the language path for a BirdNET model — get_language_path","text":"model BirdNET model object containing version information. language Character. language code retrieve path (e.g., \"en_us\"). Must one available languages given model version. downloader_key Character. key module map specifies downloader use (e.g., \"downloader_tflite\", \"downloader_protobuf\"). subfolder Character. subfolder language files stored (e.g., \"TFLite\", \"Protobuf\").","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_language_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to retrieve the language path for a BirdNET model — get_language_path","text":"character string representing path language file.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_language_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to retrieve the language path for a BirdNET model — get_language_path","text":"","code":"if (FALSE) { # interactive() model <- birdnet_model_tflite(version = \"v2.4\", language = \"en_us\") language_path <- get_language_path(model, \"en_us\", \"downloader_tflite\", \"TFLite\") }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the top prediction by confidence within time intervals — get_top_prediction","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"convenience function retrieves row(s) highest confidence value within time interval. can also limit results specific time interval specified.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"","code":"get_top_prediction(data, filter = NULL)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"data data frame columns 'start', 'end', 'scientific_name', 'common_name', 'confidence'. data frame typically output predictions_to_df. filter list containing 'start' 'end' values filter data calculation. NULL, function processes time intervals.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"data frame containing rows highest confidence per group specified interval.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/get_top_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the top prediction by confidence within time intervals — get_top_prediction","text":"","code":"if (FALSE) { # interactive() # Example data data <- data.frame(   start = c(0, 0, 1, 1, 2, 2),   end = c(1, 1, 2, 2, 3, 3),   scientific_name = c(     \"Species A\",     \"Species B\",     \"Species A\",     \"Species B\",     \"Species A\",     \"Species B\"   ),   common_name = c(     \"Common A\",     \"Common B\",     \"Common A\",     \"Common B\",     \"Common A\",     \"Common B\"   ),   confidence = c(0.1, 0.2, 0.5, 0.3, 0.7, 0.8) ) data  # Get top prediction for each time interval get_top_prediction(data)  # Get top prediction for a specific time interval get_top_prediction(data, filter = list(start = 1, end = 2))  # The same thing can be done using dplyr # data |> #    dplyr::group_by(start, end) |> #    dplyr::slice_max(order_by = confidence) }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the BirdNET Model (Deprecated) — init_model","title":"Initialize the BirdNET Model (Deprecated) — init_model","text":"function initializes BirdNET model (v2.4). kept backward compatibility deprecated. Use birdnet_model_tflite() instead model initialization.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the BirdNET Model (Deprecated) — init_model","text":"","code":"init_model(tflite_num_threads = NULL, language = \"en_us\")"},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the BirdNET Model (Deprecated) — init_model","text":"tflite_num_threads integer. number threads use TensorFlow Lite operations. NULL (default), default threading behavior used. coerced integer possible. language Character string specifying language code use model's text processing. language must one available languages supported BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the BirdNET Model (Deprecated) — init_model","text":"instance BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/init_model.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize the BirdNET Model (Deprecated) — init_model","text":"language parameter must one available languages returned available_languages(). function kept backward compatibility. Please use birdnet_model_tflite() instead.","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/install_birdnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Install BirdNET and its dependencies — install_birdnet","title":"Install BirdNET and its dependencies — install_birdnet","text":"install_birdnet() installs python package birdnet PyPi virtual environment.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/install_birdnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install BirdNET and its dependencies — install_birdnet","text":"","code":"install_birdnet(   ...,   envname = \"r-birdnet\",   new_env = identical(envname, \"r-birdnet\") )"},{"path":"https://birdnet-team.github.io/birdnetR/reference/install_birdnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install BirdNET and its dependencies — install_birdnet","text":"... arguments passed reticulate::py_install() envname Name virtual environment. Defaults 'r-birdnet'. new_env TRUE, existing Python virtual environment specified envname deleted first.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an Object is a Valid Species List — is_valid_species_list","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"internal function checks object either character vector length greater 0 list element single non-empty character string.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"","code":"is_valid_species_list(obj)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"obj object check. can either character vector list.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"logical value indicating whether object valid species list: TRUE object character vector length > 0 list element single character string. FALSE otherwise.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"function intended internal use may exported accessible external users.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/is_valid_species_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an Object is a Valid Species List — is_valid_species_list","text":"","code":"if (FALSE) { # \\dontrun{ is_valid_species_list(c(\"species1\", \"species2\")) # TRUE is_valid_species_list(list(\"species1\", \"species2\")) # TRUE is_valid_species_list(c(1, 2, 3)) # FALSE is_valid_species_list(list(a = 1, b = 2)) # FALSE } # }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/labels_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Path to a Labels File — labels_path","title":"Get Path to a Labels File — labels_path","text":"function retrieves file path BirdNET labels file system corresponding specified language. file contains class labels supported BirdNET model. custom model, path custom labels file returned.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/labels_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Path to a Labels File — labels_path","text":"","code":"labels_path(model, ...)  # S3 method for class 'birdnet_model_custom' labels_path(model, ...)  # S3 method for class 'birdnet_model_tflite' labels_path(model, language, ...)  # S3 method for class 'birdnet_model_protobuf' labels_path(model, language, ...)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/labels_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Path to a Labels File — labels_path","text":"model BirdNET model object. ... Additional arguments passed method dispatch function. language character. Specifies language code labels path returned. language must one available languages supported BirdNET model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/labels_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Path to a Labels File — labels_path","text":"character string representing file path labels file specified language.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/labels_path.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Path to a Labels File — labels_path","text":"language parameter must one available languages returned available_languages().","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/labels_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Path to a Labels File — labels_path","text":"","code":"if (FALSE) { # interactive() model <- birdnet_model_tflite(version = \"v2.4\") labels_path(model, \"fr\") }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/model_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamically create a BirdNET model — model_factory","title":"Dynamically create a BirdNET model — model_factory","text":"function dynamically creates BirdNET model based provided model name version. retrieves appropriate Python model constructor module map, evaluates constructor, returns wrapped BirdNET model object.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/model_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamically create a BirdNET model — model_factory","text":"","code":"model_factory(model_name, version, ...)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/model_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamically create a BirdNET model — model_factory","text":"model_name Character. name model create (e.g., \"tflite\", \"protobuf\"). version Character. version model (e.g., \"v2.4\"). ... Additional arguments passed Python model constructor (e.g., tflite_num_threads, language).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/model_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamically create a BirdNET model — model_factory","text":"BirdNET model object class birdnet_model subclasses (e.g., \"tflite_v2.4\").","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/model_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamically create a BirdNET model — model_factory","text":"","code":"if (FALSE) { # interactive() py_birdnet_models <- reticulate::import(\"birdnet.models\") birdnet_model <- model_factory(\"tflite\", \"v2.4\", tflite_num_threads = 2, language = \"en_us\") }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/new_birdnet_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new BirdNET model object — new_birdnet_model","title":"Create a new BirdNET model object — new_birdnet_model","text":"function creates new BirdNET model object wrapping Python model object assigning class optional subclass. model created R object can interacted using R's S3 method dispatch.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/new_birdnet_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new BirdNET model object — new_birdnet_model","text":"","code":"new_birdnet_model(x, ..., subclass = character())"},{"path":"https://birdnet-team.github.io/birdnetR/reference/new_birdnet_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new BirdNET model object — new_birdnet_model","text":"x Python object representing BirdNET model. typically Python model object created using reticulate package. ... Additional attributes attach BirdNET model object. subclass Character. optional subclass name BirdNET model (e.g., \"tflite_v2.4\"). subclass combined base class birdnet_model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/new_birdnet_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new BirdNET model object — new_birdnet_model","text":"S3 object class birdnet_model (specified subclass) containing Python model object additional attributes passed ....","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/new_birdnet_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new BirdNET model object — new_birdnet_model","text":"","code":"if (FALSE) { # interactive() py_birdnet_models <- reticulate::import(\"birdnet.models\") tflite_model <- py_birdnet_models$v2m4$AudioModelV2M4TFLite() birdnet_model <- new_birdnet_model(tflite_model, language = \"en_us\", version = \"v2.4\") }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict species for a given location and time — predict_species_at_location_and_time","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"Uses BirdNET Species Range Model estimate presence bird species specified location time year.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"","code":"predict_species_at_location_and_time(   model,   latitude,   longitude,   week = NULL,   min_confidence = 0.03 )  # S3 method for class 'birdnet_model_meta' predict_species_at_location_and_time(   model,   latitude,   longitude,   week = NULL,   min_confidence = 0.03 )"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"model birdnet_model_meta. instance BirdNET model returned birdnet_model_meta(). latitude numeric. latitude location species prediction. Must interval [-90.0, 90.0]. longitude numeric. longitude location species prediction. Must interval [-180.0, 180.0]. week integer. week year predict species. Must interval [1, 48] specified. NULL, predictions limited specific week. min_confidence numeric. Minimum confidence threshold predictions considered valid. Must interval [0, 1.0).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"data frame columns: label, confidence. row represents predicted species, confidence indicating likelihood species present specified location time.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"BirdNET Species Range Model leverages eBird checklist frequency data estimate probability bird species occurrences based latitude, longitude, time year. integrates actual observations expert-curated data, making adaptable regions varying levels data availability. model employs circular embeddings classifier predict species presence migration patterns, achieving higher accuracy data-rich regions lower accuracy underrepresented areas like parts Africa Asia. details, can view full discussion : https://github.com/kahst/BirdNET-Analyzer/discussions/234","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_at_location_and_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict species for a given location and time — predict_species_at_location_and_time","text":"","code":"if (FALSE) { # interactive() # Predict species in Chemnitz, Germany, that are present all year round model <- birdnet_model_meta(language = \"de\") predict_species_at_location_and_time(model, latitude = 50.8334, longitude = 12.9231) }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_from_audio_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","title":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","text":"Use BirdNET model predict species within audio file. model can TFLite model, custom model, Protobuf model.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_from_audio_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","text":"","code":"predict_species_from_audio_file(   model,   audio_file,   min_confidence = 0.1,   batch_size = 1L,   chunk_overlap_s = 0,   use_bandpass = TRUE,   bandpass_fmin = 0L,   bandpass_fmax = 15000L,   apply_sigmoid = TRUE,   sigmoid_sensitivity = 1,   filter_species = NULL,   keep_empty = TRUE )  # S3 method for class 'birdnet_model' predict_species_from_audio_file(   model,   audio_file,   min_confidence = 0.1,   batch_size = 1L,   chunk_overlap_s = 0,   use_bandpass = TRUE,   bandpass_fmin = 0L,   bandpass_fmax = 15000L,   apply_sigmoid = TRUE,   sigmoid_sensitivity = 1,   filter_species = NULL,   keep_empty = TRUE )"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_from_audio_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","text":"model BirdNET model object. instance BirdNET model (e.g., birdnet_model_tflite, birdnet_model_protobuf). audio_file character. path audio file. min_confidence numeric. Minimum confidence threshold predictions (default 0.1). batch_size integer. Number audio samples process batch (default 1L). chunk_overlap_s numeric. overlap audio chunks seconds (default 0). Must interval [0.0, 3.0]. use_bandpass logical. Whether apply bandpass filter (default TRUE). bandpass_fmin, bandpass_fmax integer. Minimum maximum frequencies bandpass filter (Hz). Ignored use_bandpass FALSE (default 0L 15000L). apply_sigmoid logical. Whether apply sigmoid function model output (default TRUE). sigmoid_sensitivity numeric. Sensitivity parameter sigmoid function (default 1). Must interval [0.5, 1.5]. Ignored apply_sigmoid FALSE. filter_species NULL, character vector length greater 0, list element single non-empty character string. Used filter predictions. NULL (default), filtering applied. keep_empty logical. Whether include empty intervals output (default TRUE).","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_from_audio_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","text":"data frame columns: start, end, scientific_name, common_name, confidence. row represents single prediction.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_from_audio_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","text":"Applying sigmoid activation function (apply_sigmoid=TRUE) scales unbound class output linear classifier (\"logit score\") range 0-1. confidence score unitless, numeric expression BirdNET’s “confidence” prediction (probability species presence). Sigmoid sensitivity < 1 leads higher lower scoring predictions, value > 1 leads intermediate-scoring predictions. information BirdNET confidence scores, sigmoid activation function, suggested workflow convert confidence scores probabilities, see Wood & Kahl, 2024.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_from_audio_file.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","text":"Wood, C. M., & Kahl, S. (2024). Guidelines appropriate use BirdNET scores detector outputs. Journal Ornithology. https://doi.org/10.1007/s10336-024-02144-5","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/predict_species_from_audio_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict species within an audio file using a BirdNET model — predict_species_from_audio_file","text":"","code":"if (FALSE) { # interactive() library(birdnetR)  model <- birdnet_model_tflite(version = \"v2.4\", language = \"en_us\") predictions <- predict_species_from_audio_file(model, \"path/to/audio.wav\", min_confidence = 0.2) }"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a single prediction element to a data frame — predictions_list_element_to_df","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"helper function takes single list element predictions list parses data frame format, extracting time interval, scientific name, common name, confidence level.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"","code":"predictions_list_element_to_df(x)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"x single list element predictions list. expected named list one elements names represent labels \"scientificName_commonName\" values confidence scores.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_list_element_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a single prediction element to a data frame — predictions_list_element_to_df","text":"data frame columns: start, end, scientific_name, common_name, confidence.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a list of predictions from python to a data frame — predictions_to_df","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"function processes list predictions python birdnet package, containing time intervals, scientific names, common names, confidence levels, converts structured data frame. handles cases elements list might empty.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"","code":"predictions_to_df(predictions, keep_empty = FALSE)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"predictions list element expected named list. names elements represent time intervals format \"(start,end)\", element contains another list names form \"scientificName_commonName\" values confidence scores. keep_empty logical flag indicating whether include empty elements rows output data frame. TRUE, empty elements filled NA. FALSE, empty elements excluded.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/predictions_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a list of predictions from python to a data frame — predictions_to_df","text":"data frame columns: start, end, scientific_name, common_name, confidence. row represents single prediction.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/read_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Read species labels from a file — read_labels","title":"Read species labels from a file — read_labels","text":"convenience function read species labels file.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/read_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read species labels from a file — read_labels","text":"","code":"read_labels(species_file)"},{"path":"https://birdnet-team.github.io/birdnetR/reference/read_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read species labels from a file — read_labels","text":"species_file Path species file.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/reference/read_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read species labels from a file — read_labels","text":"vector class labels e.g. c(\"Cyanocitta cristata_Blue Jay\", \"Zenaida macroura_Mourning Dove\")","code":""},{"path":[]},{"path":"https://birdnet-team.github.io/birdnetR/reference/read_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read species labels from a file — read_labels","text":"","code":"if (FALSE) { # interactive() # Read a custom species file read_labels(system.file(\"extdata\", \"species_list.txt\", package = \"birdnetR\"))  # To access all class labels that are supported in your language, # you can read in the respective label file model <- birdnet_model_tflite(version = \"v2.4\", language = \"en_us\") labels_path <- labels_path(model, \"fr\") species_list <- read_labels(labels_path) head(species_list) }"},{"path":"https://birdnet-team.github.io/birdnetR/news/index.html","id":"birdnetr-020","dir":"Changelog","previous_headings":"","what":"birdnetR 0.2.0","title":"birdnetR 0.2.0","text":"update brings significant changes improvements, including support loading pre-existing custom-trained models, aligning package birdnet 0.1.6.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"breaking changes:","title":"birdnetR 0.2.0","text":"init_model() function now deprecated removed next version. Please use birdnet_model_* function family model initialization. available_languages() update: new argument added available_languages() specify BirdNET version, making flexible different model versions. Renaming get_labels_path labels_path(). now requires model object first argument. predict_species() renamed predict_species_from_audio_file() predict_species_at_location_and_time() changed requirer model object first argument.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features:","title":"birdnetR 0.2.0","text":"Support Custom Models: can now load custom-trained models new set functions (birdnet_model_*) load pre-existing custom-trained models. functions offer flexible approach model loading. See ?birdnet_model_load details. S3 Object-Oriented System: models now implemented S3 classes, functionality related models provided methods. update makes API cleaner consistent, allows better extensibility future versions.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/news/index.html","id":"birdnetr-012","dir":"Changelog","previous_headings":"","what":"birdnetR 0.1.2","title":"birdnetR 0.1.2","text":"Uses birdnet v0.1.6 hood fix issue downloading models. new functionality yet implemented.","code":""},{"path":"https://birdnet-team.github.io/birdnetR/news/index.html","id":"birdnetr-011","dir":"Changelog","previous_headings":"","what":"birdnetR 0.1.1","title":"birdnetR 0.1.1","text":"update birdnet 0.1.1 brings:  - Add parameter ‘chunk_overlap_s’ define overlapping chunks  - Remove parameter ‘file_splitting_duration_s’ instead load files 3s chunks  - Remove ‘librosa’ dependency :  - check correct version birdnet installed current virtual environment  - expand vignette use virtual environments","code":""},{"path":"https://birdnet-team.github.io/birdnetR/news/index.html","id":"birdnetr-010","dir":"Changelog","previous_headings":"","what":"birdnetR 0.1.0","title":"birdnetR 0.1.0","text":"initial release","code":""}]
